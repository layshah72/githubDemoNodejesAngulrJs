'use strict';


var cropModule = angular.module('cropModule', ['ngRoute', 'ngResource',
		 'naif.base64']);

/**
 * Copyright (C) 2015, Ottlo pvt. ltd.
 * 
 * Description : crop Controller - cropController: Managing cropping(photos)
 * 
 * @author Lay shah
 */

/**
 * Create cropController
 * 
 * @param $scope
 */
cropModule.controller('cropController', ['$http','$scope','cropService','indexService', function($http,$scope,cropService,indexService){
    
    //$scope.srcImage="/crop/img/image.jpg";
    $scope.changeSrc =function(data){
      console.log("ng change called"+JSON.stringify($scope.myFile));
      $scope.srcImage=$scope.myFile;
    }
    var resizeableImage = function(image_target) {
  // Some variable and settings
  var $container,
      orig_src = new Image(),
      image_target = $(image_target).get(0),
      event_state = {},
      constrain = false,
      min_width = 60, // Change as required
      min_height = 60,
      max_width = 800, // Change as required
      max_height = 900,
      resize_canvas = document.createElement('canvas');

  init = function(){

    // When resizing, we will always use this copy of the original as the base
    orig_src.src=image_target.src;

    // Wrap the image with the container and add resize handles
    $(image_target).wrap('<div class="resize-container"></div>')
    .before('<span class="resize-handle resize-handle-nw"></span>')
    .before('<span class="resize-handle resize-handle-ne"></span>')
    .after('<span class="resize-handle resize-handle-se"></span>')
    .after('<span class="resize-handle resize-handle-sw"></span>');

    // Assign the container to a variable
    $container =  $(image_target).parent('.resize-container');

    // Add events
    $container.on('mousedown touchstart', '.resize-handle', startResize);
    $container.on('mousedown touchstart', 'img', startMoving);
    $('.js-crop').on('click', crop);
  };

  startResize = function(e){
    e.preventDefault();
    e.stopPropagation();
    saveEventState(e);
    $(document).on('mousemove touchmove', resizing);
    $(document).on('mouseup touchend', endResize);
  };

  endResize = function(e){
    e.preventDefault();
    $(document).off('mouseup touchend', endResize);
    $(document).off('mousemove touchmove', resizing);
  };

  saveEventState = function(e){
    // Save the initial event details and container state
    event_state.container_width = $container.width();
    event_state.container_height = $container.height();
    event_state.container_left = $container.offset().left; 
    event_state.container_top = $container.offset().top;
    event_state.mouse_x = (e.clientX || e.pageX || e.originalEvent.touches[0].clientX) + $(window).scrollLeft(); 
    event_state.mouse_y = (e.clientY || e.pageY || e.originalEvent.touches[0].clientY) + $(window).scrollTop();
  
  // This is a fix for mobile safari
  // For some reason it does not allow a direct copy of the touches property
  if(typeof e.originalEvent.touches !== 'undefined'){
    event_state.touches = [];
    $.each(e.originalEvent.touches, function(i, ob){
      event_state.touches[i] = {};
      event_state.touches[i].clientX = 0+ob.clientX;
      event_state.touches[i].clientY = 0+ob.clientY;
    });
  }
    event_state.evnt = e;
  };

  resizing = function(e){
    var mouse={},width,height,left,top,offset=$container.offset();
    mouse.x = (e.clientX || e.pageX || e.originalEvent.touches[0].clientX) + $(window).scrollLeft(); 
    mouse.y = (e.clientY || e.pageY || e.originalEvent.touches[0].clientY) + $(window).scrollTop();
    
    // Position image differently depending on the corner dragged and constraints
    if( $(event_state.evnt.target).hasClass('resize-handle-se') ){
      width = mouse.x - event_state.container_left;
      height = mouse.y  - event_state.container_top;
      left = event_state.container_left;
      top = event_state.container_top;
    } else if($(event_state.evnt.target).hasClass('resize-handle-sw') ){
      width = event_state.container_width - (mouse.x - event_state.container_left);
      height = mouse.y  - event_state.container_top;
      left = mouse.x;
      top = event_state.container_top;
    } else if($(event_state.evnt.target).hasClass('resize-handle-nw') ){
      width = event_state.container_width - (mouse.x - event_state.container_left);
      height = event_state.container_height - (mouse.y - event_state.container_top);
      left = mouse.x;
      top = mouse.y;
      if(constrain || e.shiftKey){
        top = mouse.y - ((width / orig_src.width * orig_src.height) - height);
      }
    } else if($(event_state.evnt.target).hasClass('resize-handle-ne') ){
      width = mouse.x - event_state.container_left;
      height = event_state.container_height - (mouse.y - event_state.container_top);
      left = event_state.container_left;
      top = mouse.y;
      if(constrain || e.shiftKey){
        top = mouse.y - ((width / orig_src.width * orig_src.height) - height);
      }
    }
  
    // Optionally maintain aspect ratio
    if(constrain || e.shiftKey){
      height = width / orig_src.width * orig_src.height;
    }

    if(width > min_width && height > min_height && width < max_width && height < max_height){
      // To improve performance you might limit how often resizeImage() is called
      resizeImage(width, height);  
      // Without this Firefox will not re-calculate the the image dimensions until drag end
      $container.offset({'left': left, 'top': top});
    }
  }

  resizeImage = function(width, height){
    resize_canvas.width = width;
    resize_canvas.height = height;
    resize_canvas.getContext('2d').drawImage(orig_src, 0, 0, width, height);   
    $(image_target).attr('src', resize_canvas.toDataURL("image/png"));  
  };

  startMoving = function(e){
    e.preventDefault();
    e.stopPropagation();
    saveEventState(e);
    $(document).on('mousemove touchmove', moving);
    $(document).on('mouseup touchend', endMoving);
  };

  endMoving = function(e){
    e.preventDefault();
    $(document).off('mouseup touchend', endMoving);
    $(document).off('mousemove touchmove', moving);
  };

  moving = function(e){
    var  mouse={}, touches;
    e.preventDefault();
    e.stopPropagation();
    
    touches = e.originalEvent.touches;
    
    mouse.x = (e.clientX || e.pageX || touches[0].clientX) + $(window).scrollLeft(); 
    mouse.y = (e.clientY || e.pageY || touches[0].clientY) + $(window).scrollTop();
    $container.offset({
      'left': mouse.x - ( event_state.mouse_x - event_state.container_left ),
      'top': mouse.y - ( event_state.mouse_y - event_state.container_top ) 
    });
    // Watch for pinch zoom gesture while moving
    if(event_state.touches && event_state.touches.length > 1 && touches.length > 1){
      var width = event_state.container_width, height = event_state.container_height;
      var a = event_state.touches[0].clientX - event_state.touches[1].clientX;
      a = a * a; 
      var b = event_state.touches[0].clientY - event_state.touches[1].clientY;
      b = b * b; 
      var dist1 = Math.sqrt( a + b );
      
      a = e.originalEvent.touches[0].clientX - touches[1].clientX;
      a = a * a; 
      b = e.originalEvent.touches[0].clientY - touches[1].clientY;
      b = b * b; 
      var dist2 = Math.sqrt( a + b );

      var ratio = dist2 /dist1;

      width = width * ratio;
      height = height * ratio;
      // To improve performance you might limit how often resizeImage() is called
      resizeImage(width, height);
    }
  };

  crop = function(){
    //Find the part of the image that is inside the crop box
    var crop_canvas,
        left = $('.overlay').offset().left - $container.offset().left,
        top =  $('.overlay').offset().top - $container.offset().top,
        width = $('.overlay').width(),
        height = $('.overlay').height();
    
    crop_canvas = document.createElement('canvas');
    crop_canvas.width = width;
    crop_canvas.height = height;
    console.log(crop_canvas);
    crop_canvas.getContext('2d').drawImage(image_target, left, top, width, height, 0, 0, width, height);
    var Imagedata=crop_canvas.toDataURL("image/jpeg");;
    console.log(Imagedata);
    window.open(crop_canvas.toDataURL("image/png"));
    var  promiseGetAccount= indexService.account();//promise allows synchronous loading for after data come
                promiseGetAccount.$promise.then(function(data) {
                    $scope.firstName=data.user.userName;
                    $scope.showfirstName=true;
                    var user_info_id;
                    user_info_id=data.user.user_info_id;
                    console.log("user_info_id is"+user_info_id+" and data is"+data);
                    cropService.saveImage(user_info_id,Imagedata);
                    
                    
                },function(reason) {
                    $scope.message = reason;
                    console.log(reason);
                });
    
  }

  init();
};

// Kick everything off with the target image
resizeableImage($('.resize-image'));  
 
            
    
}]);
cropModule.controller('crop2Controller', function ($scope) {
    $scope.selected = function (cords) {
        var boundx,boundy;
        $scope.cropped = true;
        var rx = 150 / cords.w;
        var ry = 150 / cords.h;
        $('#preview').css({
            width: Math.round(rx * boundx) + 'px',
            height: Math.round(ry * boundy) + 'px',
            marginLeft: '-' + Math.round(rx * cords.x) + 'px',
            marginTop: '-' + Math.round(ry * cords.y) + 'px'
        });
    };
});
cropModule.controller('crop3Controller', ['$scope','cropService','indexService', function($scope,cropService,indexService){
    /**
 * Created by ezgoing on 14/9/2014.
 */
            var options =
            {
                imageBox: '.imageBox',
                thumbBox: '.thumbBox',
                spinner: '.spinner',
                imgSrc: '/images/avatar.png'
            }  
            var cropper = cropService.getCropperObject(options);
            document.querySelector('#file').addEventListener('change', function(){
                var reader = new FileReader();
                reader.onload = function(e) {
                    options.imgSrc = e.target.result;
                    cropper = cropService.getCropperObject(options);
                }
                reader.readAsDataURL(this.files[0]);
                this.files = [];
            })
            // $scope.savecropdata =function(){
            //     alert("hi");
            //     cropService.saveCropImg(cropper);
            //     console.log(cropService.getCropImg());
            // }
             document.querySelector('#btnCrop').addEventListener('click', function(){
                    
                var cropFlag=window.location.href;
                if(!(cropFlag.indexOf("crop3")>-1)){    
                    cropService.saveCropImg(cropper);

                    console.log(cropService.getCropImg());
                }
                else{
                    var img = cropper.getDataURL();
                    document.querySelector('.cropped').innerHTML += '<img src="'+img+'">';

                    var  promiseGetAccount= indexService.account();//promise allows synchronous loading for after data come
                    promiseGetAccount.$promise.then(function(data) {
                        $scope.firstName=data.user.userName;
                        $scope.showfirstName=true;
                        var user_info_id;
                        user_info_id=data.user.user_info_id;
                        console.log("user_info_id is"+user_info_id+" and data is"+data);
                        cropService.saveImage(user_info_id,img);
                        
                        
                    },function(reason) {
                            $scope.message = reason;
                            console.log(reason);
                    });
        
                }
              
            })
            document.querySelector('#btnZoomIn').addEventListener('click', function(){
                cropper.zoomIn();
            })
            document.querySelector('#btnZoomOut').addEventListener('click', function(){
                cropper.zoomOut();
            })
            
}]);
'use strict';
/**
 * Copyright (C) 2015, Ottlo pvt. ltd.
 * 
 * Description : crop Controller - cropController: Managing cropping(photos)
 * 
 * @author Lay shah
 */

/**
 * Create cropController
 * 
 * @param $scope
 */
cropModule.factory('cropResource', [ '$resource', function($resource) {
	var cropResource = $resource('/api/crop/saveImageData', {}, {
		// Get all eventValueTypes
		saveImageData : {
			method : 'POST',
			url : '/api/crop/saveImageData',
			isArray : true
		}

		
	});

	return cropResource;
} ]);


cropModule.config([ '$routeProvider', function($routeProvider) {

	$routeProvider.when('/crop', {
		templateUrl : 'rootOttloApp/crop/public/views/crop.ejs',
		controller : 'cropController'
	});
	$routeProvider.when('/crop2', {
		templateUrl : 'rootOttloApp/crop/public/views/crop2.ejs',
		controller : 'crop2Controller'
	});
	$routeProvider.when('/crop3', {
		templateUrl : 'rootOttloApp/crop/public/views/crop3.ejs',
		controller : 'crop3Controller'
	});
}]);

cropModule.run([ '$location', '$rootScope', function($location, $rootScope) {
	$rootScope.activePath = null;
	$rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
		$rootScope.title = current.$$route.title;
		$rootScope.activePath = $location.path();
	});
}]);
/**
 * Copyright (C) 2015, Ottlo pvt. ltd.
 * 
 * Description : crop Service - cropService: Managing cropping data(photos)
 * 
 * @author Lay shah
 */

/**
 * Create cropService
 * 
 * @param $scope
 */
cropModule.factory('cropService', ['cropResource',function(cropResource) {
		var globalCropperObj;		 
	return{
		saveImage:function(user_info_id,ImageData){
			var signUpParam={
				user_info_id:user_info_id,
		 		photo: ImageData
		 	};
		 	return cropResource.saveImageData(signUpParam);	
		},


 		cropbox : function(options){
    
		    var el = document.querySelector(options.imageBox),
		    obj =
		    {
		        state : {},
		        ratio : 1,
		        options : options,
		        imageBox : el,
		        thumbBox : el.querySelector(options.thumbBox),
		        spinner : el.querySelector(options.spinner),
		        image : new Image(),
		        getDataURL: function ()
		        {
		            var width = this.thumbBox.clientWidth,
		                height = this.thumbBox.clientHeight,
		                canvas = document.createElement("canvas"),
		                dim = el.style.backgroundPosition.split(' '),
		                size = el.style.backgroundSize.split(' '),
		                dx = parseInt(dim[0]) - el.clientWidth/2 + width/2,
		                dy = parseInt(dim[1]) - el.clientHeight/2 + height/2,
		                dw = parseInt(size[0]),
		                dh = parseInt(size[1]),
		                sh = parseInt(this.image.height),
		                sw = parseInt(this.image.width);

		            canvas.width = width;
		            canvas.height = height;
		            var context = canvas.getContext("2d");
		            context.drawImage(this.image, 0, 0, sw, sh, dx, dy, dw, dh);
		            var imageData = canvas.toDataURL('image/png');
		            return imageData;
		        },
		        getBlob: function()
		        {
		            var imageData = this.getDataURL();
		            var b64 = imageData.replace('data:image/png;base64,','');
		            var binary = atob(b64);
		            var array = [];
		            for (var i = 0; i < binary.length; i++) {
		                array.push(binary.charCodeAt(i));
		            }
		            return  new Blob([new Uint8Array(array)], {type: 'image/png'});
		        },
		        zoomIn: function ()
		        {
		            this.ratio*=1.1;
		            setBackground();
		        },
		        zoomOut: function ()
		        {
		            this.ratio*=0.9;
		            setBackground();
		        }
		    },
		    attachEvent = function(node, event, cb)
		    {
		        if (node.attachEvent)
		            node.attachEvent('on'+event, cb);
		        else if (node.addEventListener)
		            node.addEventListener(event, cb);
		    },
		    detachEvent = function(node, event, cb)
		    {
		        if(node.detachEvent) {
		            node.detachEvent('on'+event, cb);
		        }
		        else if(node.removeEventListener) {
		            node.removeEventListener(event, render);
		        }
		    },
		    stopEvent = function (e) {
		        if(window.event) e.cancelBubble = true;
		        else e.stopImmediatePropagation();
		    },
		    setBackground = function()
		    {
		        var w =  parseInt(obj.image.width)*obj.ratio;
		        var h =  parseInt(obj.image.height)*obj.ratio;

		        var pw = (el.clientWidth - w) / 2;
		        var ph = (el.clientHeight - h) / 2;

		        el.setAttribute('style',
		                'background-image: url(' + obj.image.src + '); ' +
		                'background-size: ' + w +'px ' + h + 'px; ' +
		                'background-position: ' + pw + 'px ' + ph + 'px; ' +
		                'background-repeat: no-repeat');
		    },
		    imgMouseDown = function(e)
		    {
		        stopEvent(e);

		        obj.state.dragable = true;
		        obj.state.mouseX = e.clientX;
		        obj.state.mouseY = e.clientY;
		    },
		    imgMouseMove = function(e)
		    {
		        stopEvent(e);

		        if (obj.state.dragable)
		        {
		            var x = e.clientX - obj.state.mouseX;
		            var y = e.clientY - obj.state.mouseY;

		            var bg = el.style.backgroundPosition.split(' ');

		            var bgX = x + parseInt(bg[0]);
		            var bgY = y + parseInt(bg[1]);

		            el.style.backgroundPosition = bgX +'px ' + bgY + 'px';

		            obj.state.mouseX = e.clientX;
		            obj.state.mouseY = e.clientY;
		        }
		    },
		    imgMouseUp = function(e)
		    {
		        stopEvent(e);
		        obj.state.dragable = false;
		    },
		    zoomImage = function(e)
		    {
		        var evt=window.event || e;
		        var delta=evt.detail? evt.detail*(-120) : evt.wheelDelta;
		        delta > -120 ? obj.ratio*=1.1 : obj.ratio*=0.9;
		        setBackground();
		    }

		    obj.spinner.style.display = 'block';
		    obj.image.onload = function() {
		        obj.spinner.style.display = 'none';
		        setBackground();

		        attachEvent(el, 'mousedown', imgMouseDown);
		        attachEvent(el, 'mousemove', imgMouseMove);
		        attachEvent(document.body, 'mouseup', imgMouseUp);
		        var mousewheel = (/Firefox/i.test(navigator.userAgent))? 'DOMMouseScroll' : 'mousewheel';
		        attachEvent(el, mousewheel, zoomImage);
		    };
		    obj.image.src = options.imgSrc;
		    attachEvent(el, 'DOMNodeRemoved', function(){detachEvent(document.body, 'DOMNodeRemoved', imgMouseUp)});

		    return obj;
		},

         getCropperObject : function(options){
          var cropper = cropbox(options);
           return cropper
         },
         saveCropImg : function(cropperObj){
         	globalCropperObj=cropperObj;	
         },
         getCropImg:function(){
         	return globalCropperObj;
         }

        
            
	}
	
}]);	