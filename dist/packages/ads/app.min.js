'use strict';


var adsModule = angular.module('adsModule', ['ngRoute', 'ngResource',
		'sharedModule', 'naif.base64','accessModule']);
// adsModule.controller('adsController', ['$scope', 'adsEntryService' function($scope,adsEntryService){
    
    

    
// }]);
adsModule.controller('fileUploadController', ['$scope','fileUploadService', 'adsService', function($scope,fileUploadService, adsService){
    
   

    $scope.makeEntry =function(data){
        adsService.createAd(data,$scope.adsCreativeName);  
    }


    $scope.uploadFile = function(uploadUrl){
        var file = $scope.myFile;
        console.log('file is ' + JSON.stringify(file));
        //var uploadUrl = 'ottloadcreative';
        $scope.data=fileUploadService.uploadFileToBucket(file, uploadUrl);
        //$scope.data=AWSS3Service.getFileUrlFromPrivateBucket(uploadUrl);
        //fileUploadToREST.uploadFileToREST(file,uploadUrl);
        console.log(JSON.stringify($scope.data));
        //adsService.createAd($scope.data,$scope.adsCreativeName);
    };

    
    
}]);
'use strict';

/**
 * Copyright (C) 2015, Clearstream.tv
 * 
 * Description : Public Resource - categoryResource: To perform category related
 * REST operations.
 * 
 * @author Cybage
 */

/**
 * Create categoryResource factory
 * 
 * @param $resource
 * 
 * @return categoryResource
 */
adsModule.factory('adsResource', [ '$resource', function($resource) {
	var adsResource = $resource('/api/ads/createAd', {}, {
		// Get all eventValueTypes
		all : {
			method : 'GET',
			url : '/api/ads/getAd',
			isArray : true
		},

		create : {
			method : 'POST',
			url : '/api/ads/createAd'
		},
		getFile:{
			method : 'GET',
			url : '/api/ads/getFile'	
		}
	});

	return adsResource;
} ]);



adsModule.config([ '$routeProvider', function($routeProvider) {
	$routeProvider.when('/ads', {
		templateUrl : 'rootOttloApp/ads/public/views/ads.ejs',
		controller : 'fileUploadController'
	});

	$routeProvider.when('/file', {
		templateUrl : 'rootOttloApp/ads/public/views/FileUpload.ejs',
		controller : 'fileUploadController'
	});

	$routeProvider.when('/chat', {
		templateUrl : 'rootOttloApp/ads/public/views/chat.ejs',
		controller : 'fileUploadController'
	});
	$routeProvider.when('/cloudinary', {
		templateUrl : 'rootOttloApp/ads/public/views/cloudinary.ejs',
		controller : 'fileUploadController'
	});

	
} ]);
adsModule.config(function($sceDelegateProvider) {
  $sceDelegateProvider.resourceUrlWhitelist([
    // Allow same origin resource loads.
    'self',

    //allow all
    '**'
  ]);

  
});


adsModule.run([ '$location', '$rootScope', function($location, $rootScope) {
	$rootScope.activePath = null;
	$rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
		$rootScope.title = current.$$route.title;
		$rootScope.activePath = $location.path();
	});
} ]);


adsModule.filter('csFromJson', function() {
	return function(input) {
		try {
			return angular.fromJson(input).base64;
		} catch (error) {
			return input;
		}
	};
});

adsModule.factory('AWSS3Service', ['$http','amazonCognitoSyncService','AWSS3AuthenticateService','$q', '$sce',function ($http,amazonCognitoSyncService,AWSS3AuthenticateService,$q,$sce) {
    return {

        uploadFileToBucket : function(file, uploadBucket){
    	   var bucket = new AWS.S3({params: {Bucket: uploadBucket}});
 		     AWSS3AuthenticateService.AWSS3Authenticate().then(function(data) {
                // promise fulfilled
                if (data!=null) { 
                   var params = {Key: 'cognito/users/'+data.IdentityId+'/'+file.name, ContentType: file.type, Body: file};
                   

                   bucket.upload(params, function (err, data) {
                        data = err ?  data= err : data= data;
                        console.log(JSON.stringify(data));
                        //$scope.makeEntry($scope.data);
                        return data;
                    });
                } 
            });      
                        
         },  
                      
        
        getFileUrlFromPrivateBucket: function(downloadBucket){
            return $q(function(resolve, reject) {
                var bucket = new AWS.S3({params: {Bucket: downloadBucket}});
                 AWSS3AuthenticateService.AWSS3Authenticate().then(function(data) {
                        // promise fulfilled
                    if (data!=null) { 
                        AWS.config.credentials.get(function(err) {
                            if (!err) {
                                console.log(data.IdentityId);
                                bucket.listObjects({Bucket: downloadBucket, /* required */
                                Marker: 'cognito/users/'+data.IdentityId},
                                function (err, data1) {
                                    console.log(err);

                                 var bucketObjects = data1.Contents;
                                 
                                 
                                 for(var objectIndex in bucketObjects){
                                    var url = bucket.getSignedUrl('getObject',{Bucket:downloadBucket,Key:bucketObjects[objectIndex].Key});
                                    bucketObjects[objectIndex]['url']=url;
                                    bucketObjects[objectIndex]['IdentityId'] = data.IdentityId;
                                     console.log('url is', url);
                                 }
                                   
                                    resolve(bucketObjects);    
                                });
    
                            }
                            else{
                                    reject(err);
                            }

                        });
                    }
                });
            });
        },

        uploadFileToPrivateBucket: function(uploadBucket,files,Prefix){
            return $q(function(resolve, reject) {
                var bucket = new AWS.S3({params: {Bucket: 'private-memories'}});    
                AWSS3AuthenticateService.AWSS3Authenticate().then(function(data) {
                    // promise fulfilled
                    if (data!=null) { 
                        AWS.config.credentials.get(function(err) {
                            if (!err) {
                                console.log(data.IdentityId);
                                
                                var i;
                                for(i=0;i<files.length;i++){
                                    console.log(files[i].type);
                                    var params = {Key: 'cognito/users/' +data.IdentityId+Prefix+'/'+files[i].name, Body: files[i], ContentType: files[i].type};
                                    bucket.upload(params, function (err, data) {
                                        $scope.data = err ? 'ERROR!' :  data;
                                        console.log(JSON.stringify(data));
                                        if(!err){
                                            return data;
                                            resolve(data);
                                        }
                                        else{
                                            return err;
                                            reject(err);
                                        }
                    
                                    });
                                }
                                    
                            }
                            else{
                                    reject(err);
                            }

                        });
                    }
                });
            });
        },

    getFileUrlFromPublicBucket: function(downloadBucket){
    return $q(function(resolve, reject) {
            AWS.config.update({accessKeyId: 'AKIAJLFZ4OIWVUT7W3QQ', secretAccessKey: '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'});
            var bucket = new AWS.S3({params: {Bucket: downloadBucket}});
             
              
        bucket.listObjects({Bucket: downloadBucket, /* required */
        Marker: '/' },
        function (error, data) {
            console.log(error);
            if(!error){
                var bucketObjects = data.Contents;
                for(var objectIndex in bucketObjects){
                    var url = bucket.getSignedUrl('getObject', {Bucket:downloadBucket,Key:bucketObjects[objectIndex].Key});
                    bucketObjects[objectIndex]['IdentityId'] = "";
                    bucketObjects[objectIndex]['url'] = url;
                }
            console.log('url is', bucketObjects);
            resolve(bucketObjects);
            }else{
                reject(error);
        
            }                            
                                
        });

    });                   
                  
    },
    getSpecificFileFromSpecificDirectoryPrefixPublicBucket: function(downloadBucket,fileName,dirPrefix,pageNumber,listLength){
    return $q(function(resolve, reject) {
            AWS.config.update({accessKeyId: 'AKIAJLFZ4OIWVUT7W3QQ', secretAccessKey: '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'});
            var bucket = new AWS.S3({params: {Bucket: downloadBucket}});
             var delimiter;
             
           
             if(fileName=='*'){
                delimiter=null;
             }else{
                delimiter=fileName;
             }
              
        bucket.listObjects({Bucket: downloadBucket, /* required */
        Prefix: dirPrefix, Delimiter:delimiter,EncodingType: 'url'},
        function (error, data) {
            console.log(data);
            var k=0;
            if(!error){
                if(fileName!='*'){
                    var bucketObjects = data.CommonPrefixes;
                }
                else
                {
                    var bucketObjects = data.Contents;   
                }
                var deleteIndex=[];
                console.log("bucket object is"+JSON.stringify(bucketObjects));
                 var objectIndex;
                 var length1=bucketObjects.length;

                 console.log(length1);
                 bucketObjects=bucketObjects.splice((pageNumber-1)*listLength,listLength);
                for( objectIndex in bucketObjects){
                    if(fileName!='*'){
                       
                        var url = bucket.getSignedUrl('getObject', {Bucket:downloadBucket,Key:bucketObjects[objectIndex].Prefix});
                    }
                    else{

                        if(bucketObjects[objectIndex].Key!=dirPrefix){
                            console.log(bucketObjects[objectIndex]);
                            var url = bucket.getSignedUrl('getObject', {Bucket:downloadBucket,Key:bucketObjects[objectIndex].Key});         
                            console.log(url);
                        }
                        else{

                            deleteIndex[k]=objectIndex;
                            k=k+1;
                        }
                    }
                    bucketObjects[objectIndex]['url'] = url;
                    bucketObjects[objectIndex]['content'] = bucketObjects[objectIndex].Key;
                    bucketObjects[objectIndex]['length']=length1;
                    console.log('url is', bucketObjects);
                }
                console.log(k);
                if(fileName=='*' && k!=0)
                {
                    for (var n in deleteIndex)    
                    bucketObjects.splice(n,1);
                }
                console.log('url is', bucketObjects);
                resolve(bucketObjects);
            }else{
                reject(error);
        
            }                            
                                
        });

    });                   
                  
    },
    getSpecificFileFromSpecificDirectoryPrefixPrivateBucket:function(downloadBucket,fileName,dirPrefix){
    return $q(function(resolve, reject) {
                         AWS.config.update({accessKeyId: 'AKIAJLFZ4OIWVUT7W3QQ', secretAccessKey: '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'});
                var bucket = new AWS.S3({params: {Bucket: downloadBucket}});                  
                AWSS3AuthenticateService.AWSS3Authenticate().then(function(data) {
                        // promise fulfilled

                    if (data!=null) {
                        console.log(data);
                        var k=0; 
                        AWS.config.credentials.get(function(err) {
                            if (!err) {
                                console.log(data.IdentityId);

                                var delimiter;
                                if(fileName=='*'){
                                    delimiter=null;
                                }else{
                                    delimiter=fileName;
                                }
              
                                bucket.listObjects({Bucket: downloadBucket, /* required */
                                Prefix: 'cognito/users/'+data.IdentityId+dirPrefix, Delimiter:delimiter},
                                function (error, data) {
                                    console.log(data);
                                    if(!error){
                                        var bucketObjects = data.Contents;
                                        var deleteIndex="";
                                        console.log('here it is', bucketObjects);
                                        for(var objectIndex in bucketObjects){
                                            if(fileName!='*'){
                                                var url = bucket.getSignedUrl('getObject', {Bucket:downloadBucket,Key:bucketObjects[objectIndex].Key+fileName});
                                            }
                                            else{
                                                if(bucketObjects[objectIndex].Key !='cognito/users/'+data.IdentityId+dirPrefix){
                                                    var url = bucket.getSignedUrl('getObject', {Bucket:downloadBucket,Key:bucketObjects[objectIndex].Key});         
                                                }
                                                else{
                                                    deleteIndex[k]=objectIndex;
                                                    k=k+1;
                                                }
                                            }
                                            bucketObjects[objectIndex]['url'] = url;
                                            bucketObjects[objectIndex]['content'] = bucketObjects[objectIndex].Key;
                                            console.log('url is', bucketObjects);
                                        }
                                        console.log(k);
                                                if(fileName=='*' && k!=0)
                                                {
                                                    for (var n in deleteIndex)    
                                                    bucketObjects.splice(n,1);
                                                }
                                        console.log('url is', bucketObjects);
                                        resolve(bucketObjects);
                                    }
                                    else{
                                        console.log(error);
                                        reject(error);
                                    }                            
                                });
                            }else{

                            }
                        });    
                    }
                    else{

                    }
                        
                });   
            });
    }
}


    
}]);        
adsModule.factory('AWSS3AuthenticateService', ['$http','amazonCognitoSyncService','$q', function ($http,amazonCognitoSyncService,$q) {
    return {
    		AWSS3Authenticate :function(){
    			return amazonCognitoSyncService.getToken()
                // then() called when son gets back
                .then(function(data) {
                    // promise fulfilled
                     if (data!=null) {
                        console.log(data);
                        var param = {
                                    IdentityPoolId: 'us-east-1:998c9ce3-1154-4a29-94a2-276efa151726', /* required */
                                    RoleArn: 'arn:aws:iam::558231766839:role/developer',
                                    WebIdentityToken: data.Token 
                        };
                

                    	// set the Amazon Cognito region
                    	AWS.config.region = 'us-east-1';

                    	AWS.config.credentials = new AWS.WebIdentityCredentials(param);
                    	AWS.config.credentials.identityId=data.IdentityId;   
                    	return data;
    				}
    				else {
                            // invalid response
                            return $q.reject(data);
                    }
    			}, function(response) {
                        // something went wrong
                        return $q.reject(data);
                    });
				
			}
		}
}]);			
adsModule.factory('adsService', ['adsResource',function(adsResource) {
			
	return{
				

		/**
		 * Create ads
		 * 
		 * @param ad_id
		 * @param ad_content
		 * @param ad_height
		 * @param ad_width
		 * @param ad_name
		 * @param ad_price
		 * @param ad_url
		 * @param buyer_id

				 
		 */
		 allMyProjects:function(user_id){
		 	return adsResource.all(user_id);
		 },
		createProject : function(projectName,description,manager_id,user_id) {
			// TODO: Will be replaced by value object creation
	
			var projectParam={
								
				project_name : projectName,						
				description : description,
				manager_id :	manager_id,
				created_by_id : user_id
				
			};
								
							
									
					
			return adsResource.create(projectParam);

					// Create partner by REST call
					
		}
	}
} 
]);



adsModule.factory('fileUploadService', ['$http','AWSS3Service','httpFileUploadService', function ($http,AWSS3Service,httpFileUploadService) {
    return{

        uploadFileToBucket : function(file, uploadUrl){
            
            if (file) {
            results.innerHTML = '';
            var data;
            data=AWSS3Service.uploadFileToBucket(file,uploadUrl);
            //data=AWSS3Service.getFileUrlFromPrivateBucket(uploadUrl);
            return data;
            //httpFileUpload.uploadFileToUrl(file,uploadUrl);
            }  
            else {
                results.innerHTML = 'Nothing to upload.';
                
            }   
        },


        uploadFileToREST : function(file, uploadUrl){
            
            if (file) {
            results.innerHTML = '';

            //AWSservice.uploadFileToBucket(file, uploadUrl);
            httpFileUploadService.uploadFileToUrl(file,uploadUrl);
            }  
            else {
                results.innerHTML = 'Nothing to upload.';
            }   

        }    
        
    }
}]);




 adsModule.factory('httpFileUploadService', ['$http', function ($http) {
    

    return{

        uploadFileToUrl : function(file, uploadUrl){


        //***** code to uploadfile via http request ******//     
        var fd = new FormData();
        fd.append('file', file);

        $http.post(uploadUrl, fd, {

            transformRequest: function(fd, headersGetterFunction) {
                return fd; // do nothing! FormData is very good!
            },
            headers: {'Content-Type': undefined}
        })
        .success(function(){
        })
        .error(function(){
        });
        // **** end  ****//   

        }
    }    
}]);        