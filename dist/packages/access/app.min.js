'use strict';

/**
 * Copyright (C) 2015, Clearstream.tv
 * 
 * Description : Access - app.js: Defining module level app.
 * 
 * @author Cybage
 */

var accessModule = angular.module('accessModule', ['sharedModule', 'naif.base64']);

/**
 * isAuthenticated function: It will check user is authenticated or not by
 * making a backend call.
 */
accessModule.isAuthenticated = function($http, $q) {
    // Initialize a new promise
    var deferred = $q.defer();

    // Make an AJAX call to check if the user is logged in
    $http.get('/loggedin').success(function( /*data, status, headers, config*/ ) {
        // this callback will be called asynchronously
        // when the response is available
    }).
    error(function( /*data, status, headers, config*/ ) {
        // called asynchronously if an error occurs
        // or server returns response with an error status.
    });

    return deferred.promise;
};

/**
 * requestResponseInterceptor : To intercept request & response for checking user is authenticated
 * or not. If not then it would be redirected to login page
 */
accessModule.factory('requestResponseInterceptor', [
    '$injector',
    '$q',
    '$window',
    function($injector, $q, $window) {
        var requestResponseInterceptor = {
            request: function(config) {
                console.log("yes it")
                if (config.url.indexOf('rootOttloApp') > -1 || config.url.indexOf('api') > -1 || config.url.indexOf('signUp') > -1) {
                    // Invoke isAuthenticated method
                    accessModule
                        .isAuthenticated($injector.get('$http'), $q);
                }

                return config;
            },
            response: function(response) {
                return response;
            },
            responseError: function(response) {
                // If response status is 401 or 0 then redirect to login page
                if (response.status === 401 || response.status === 0) {
                    $window.location.href = '/#/signUp';
                    $window.location.reload();
                }

                return $q.reject(response);
            }
        };

        return requestResponseInterceptor;
    }
]);

/**
 * Config: configure $httpProvider with interceptors
 */
accessModule.config(['$httpProvider', function($httpProvider) {
    // Adding requestResponseInterceptor
  //  $httpProvider.interceptors.push('requestResponseInterceptor');
}]);


accessModule.controller('loginController', ['$scope','$location','facebookService','amazonCognitoSyncService', function($scope,$location,facebookService,amazonCognitoSyncService){
		$scope.FBInit =function(appId){
			facebookService.FBInit(appId); 
		}

	    $scope.checkLoginState= function () {
	        // This function is called when someone finishes with the Login
	        // Button.  See the onlogin handler attached to it in the sample
	        // code below.
	        FB.getLoginStatus(function(response) {
	            $scope.statusChangeCallback(response);
	        });
	    }

	     // This is called with the results from from FB.getLoginStatus().
	    $scope.statusChangeCallback = function (response) {
	        console.log('statusChangeCallback');
	        console.log(response);
	        // The response object is returned with a status field that lets the
	        // app know the current login status of the person.
	        // Full docs on the response object can be found in the documentation
	        // for FB.getLoginStatus().
	        if (response.status === 'connected') {
	          // Logged into your app and Facebook.
	          $scope.testFBAPI();
	        } else if (response.status === 'not_authorized') {
	          // The person is logged into Facebook, but not your app.
	          document.getElementById('status').innerHTML = 'Please log ' +
	            'into this app.';
	        } else {
	          // The person is not logged into Facebook, so we're not sure if
	          // they are logged into this app or not.
	          document.getElementById('status').innerHTML = 'Please log ' +
	            'into Facebook.';
	        }
	    }

	    $scope.testFBAPI =function(){
	        
	        console.log('Welcome!  Fetching your information.... ');
	        FB.api('/me', function(response) {
	            console.log('Successful login for: ' + response.name);
	            $scope.FB_access_token=FB.getAuthResponse().accessToken;
	            document.getElementById('status').innerHTML =
	            'Thanks for logging in, ' + response.name + '!';
	            
	            facebookService.FBsyncAmazonBucket($scope.FB_access_token);

	            //$scope.testAWSDeveloperIdentityAPI();
	        });
	        
	    }

		    

	
	    $scope.testAWSDeveloperIdentityAPI=function(){

            	amazonCognitoSyncService.getToken()
                // then() called when son gets back
                .then(function(data) {
                    // promise fulfilled
                    if (data!=null) {
                    	console.log(data);
                        var params = {
	              					IdentityPoolId: 'us-east-1:998c9ce3-1154-4a29-94a2-276efa151726', /* required */
	                				RoleArn: 'arn:aws:iam::558231766839:role/developer',
  									WebIdentityToken: data.Token 
	            		};
	            

	           		// set the Amazon Cognito region
	            	AWS.config.region = 'us-east-1';
	            	// initialize the Credentials object with our parameters
	            	AWS.config.credentials = new AWS.WebIdentityCredentials(params);
	            	var cognitoSyncClients = new AWS.CognitoSync();
	            	AWS.config.credentials.identityId=data.IdentityId;  
	            	// We can set the get method of the Credentials object to retrieve
	            	// the unique identifier for the end user (identityId) once the provider
	            	// has refreshed itself
	            
	            
	            	var cognitoidentity = new AWS.CognitoIdentity();
	           		var identityid;
 					AWS.config.credentials.get(function(err) {
	 					if(!err){
		                    	// Other service clients will automatically use the Cognito Credentials provider
		                    	// configured in the JavaScript SDK.
		                 		//  var cognitoSyncClient = new AWS.CognitoSync();
		                   		// identityid=AWS.config.credentials.identityId;
		                    	amazonCognitoSyncService.synchronize(data.IdentityId,"layshah");
		                }
		                else
		                {
		                   		console.log(err);
		                }

	     			});   
                } 
                else{
                    console.log("error");
                }
            }, function(error) {
                // promise rejected, could log the error with: console.log('error', error);
                   	console.log(error);
                }
                );
        

	               	   				
	             

	    }
	    
	
	
    

	    $scope.listMyDataset= function(){
	                var cognitoSyncClient = new AWS.CognitoSync();

	                console.log(Identittid);


	                cognitoSyncClient.listDatasets({
	                        IdentityId: Identittid,
	                        IdentityPoolId: "us-east-1:998c9ce3-1154-4a29-94a2-276efa151726"
	                    }, 
	                    function(err, data) {
	                        if ( !err ) {
	                            console.log(JSON.stringify(data));

	                            $location.path('/#');
	                        }
	                        else{
	                            console.log(err);   
	                        }
	                });


	    }


	    
	}]);    


accessModule.controller('signupController', ['$scope','$location', 'signupService',function($scope,$location,signupService){

	 	$scope.CreateUser =function(){
	 		
	 		console.log();
	 		$scope.selectedInterests;
	 		signupService.addUser($scope.firstName,$scope.middelName,$scope.lastName,$scope.birthDate,
	 			$scope.gender,$scope.city,$scope.state,$scope.country,$scope.zipCode,$scope.email,
	 			$scope.password,$scope.selectedInterests);
	 		
	 		$scope.AddselectedInterests = function(interest){
            
                
                    var index = $scope.selectedInterests.indexOf(interest);
                    if ( index >= 0 ) {
                        $scope.selectedInterests.splice( index, 1 );
                        console.log(JSON.stringify($scope.selectedInterests));
                    }   
                    else{
                        $scope.selectedInterests.push( interest );
                        console.log(JSON.stringify($scope.selectedInterests)); 
                    }
                   
        	};
	 		
	 	}
	}]);    
accessModule.controller('syncController', ['$scope', '$rootScope' , '$http', 'facebookService','amazonCognitoSyncService',function($scope, $rootScope, $http, facebookService,amazonCognitoSyncService){
	  	$scope.FBInit =function(appId){
			facebookService.FBInit(appId);
		}

		$scope.getAccount = function() {    
		console.log('get to account');
	    // Make an AJAX call to check if the user is logged in
	    $http.get('/account').success(function(data){
	    	$rootScope.session = {}
			$rootScope.session.user = data;
	        return data;
	    }).error(function(){
	        alert("error");
	    });    
	}

	  	$scope.TestSyncUsingFBAccount=function() {       
	       
	         console.log('Welcome!  Fetching your information.... ');
	        
	        FB.getLoginStatus(function(response) {

	        });

	        FB.api('/me', function(response) {
	            console.log('Successful login for: ' + response.name);
	            $scope.FB_access_token=FB.getAuthResponse().accessToken;
	            document.getElementById('status').innerHTML =
	            'Thanks for logging in, ' + response.name + '!';
	            
	            facebookService.FBsyncAmazonBucket($scope.FB_access_token);

	            //$scope.testAWSDeveloperIdentityAPI();
	        });
	   	}

	   	$scope.TestSyncUsingDeveloperAccount=function(){
	   		  	
	        //var cognitoidentity = new AWS.CognitoIdentity({accessKeyId: 'AKIAJZX4GTF46ZKGQR3A',region:'us-east-1' , secretAccessKey: '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'});    

			var params = {
					  IdentityPoolId: 'us-east-1:998c9ce3-1154-4a29-94a2-276efa151726', /* required */
					  Logins: { /* required */
					    'lala': 'OTTLO_PRNV'
					    /* anotherKey: ... */
					  }
			};

			AWS.config.credentials = new AWS.CognitoIdentityCredentials(params);
	            var cognitoSyncClients = new AWS.CognitoSync();
	              
	            // We can set the get method of the Credentials object to retrieve
	            // the unique identifier for the end user (identityId) once the provider
	            // has refreshed itself
	            
	            
	           // var cognitoidentity = new AWS.CognitoIdentity();
	           	var identityid;

	            AWS.config.credentials.get(function(err) {
	                if (!err) {
	                    console.log("Cognito Identity Id: " + AWS.config.credentials.identityId);
	                    // Other service clients will automatically use the Cognito Credentials provider
	                    // configured in the JavaScript SDK.
	                    var cognitoSyncClient = new AWS.CognitoSync();
	                    identityid=AWS.config.credentials.identityId;
	                    amazonCognitoSyncService.synchronize(identityid,"layshah");
	                    cognitoSyncClient.listDatasets({
	                        IdentityId: AWS.config.credentials.identityId,
	                        IdentityPoolId: "us-east-1:998c9ce3-1154-4a29-94a2-276efa151726"
	                    }, 
	                    function(err, data) {
	                        if ( !err ) {
	                            console.log(JSON.stringify(data));
	                            
	                            window.localStorage.clear();
	                        }
	                    });
	                
	                }


	            });

			/*cognitoidentity.getOpenIdTokenForDeveloperIdentity(params, function(err, data) {
				  if (err){
				  	console.log(err, err.stack); // an error occurred
				  } 
				  else{
				  	console.log(data);


				  	//amazonCognitoSyncService.synchronize(data.IdentityId,"developeridentity224348");
				  }  
			});*/
	   	}
	     		

}]);    
'use strict';

/**
 * Copyright (C) 2015, Clearstream.tv
 * 
 * Description : Public Resource - categoryResource: To perform category related
 * REST operations.
 * 
 * @author Cybage
 */

/**
 * Create categoryResource factory
 * 
 * @param $resource
 * 
 * @return categoryResource
 */
accessModule.factory('accessResource', [ '$resource', function($resource) {
	var memoriesResource = $resource('/api/access/createUserInfo', {}, {
		// Get all eventValueTypes
		createUserInfo : {
			method : 'POST',
			url : '/api/access/createUserInfo',
			isArray : false
		}

		
	});

	return memoriesResource;
} ]);


accessModule.config([ '$routeProvider', function($routeProvider) {

	$routeProvider.when('/login', {
		templateUrl : 'rootFunvestApp/access/public/views/login.ejs',
		controller : 'loginController'
	});

	$routeProvider.when('/signUp', {
		templateUrl : 'rootFunvestApp/access/public/views/signup.ejs',
		controller : 'signupController'
	});
	$routeProvider.when('/sync', {
		templateUrl : 'rootFunvestApp/access/public/views/sync.ejs',
		controller : 'syncController'
	});

}]);
accessModule.config(function($sceDelegateProvider) {
  $sceDelegateProvider.resourceUrlWhitelist([
    // Allow same origin resource loads.
    //'self',
    // // Allow loading from our assets domain.  Notice the difference between * and **.
    // 'http://srv*.assets.example.com/**',
    // //allow all
    	'**'
  ]);

  
});

accessModule.run([ '$location', '$rootScope', function($location, $rootScope) {
	$rootScope.activePath = null;
	$rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
		$rootScope.title = current.$$route.title;
		$rootScope.activePath = $location.path();
	});
}]);
accessModule.factory('amazonCognitoSyncService', ['accessResource','$http','$q',function(accessResource,$http, $q) {
			
	return{
		synchronize : function(identityid, datasetp) {	
		     	//var cognitosync = new AWS.CognitoSync();
		    	
				// //Call to the listRecords function of the Amazon Cognito’s API
					
				// cognitosync.listRecords({
		  //   		DatasetName: datasetp, //Name of the dataset 
		  //   		IdentityId: identityid, //Cognito ID of the user
		  //   		IdentityPoolId: 'us-east-1:998c9ce3-1154-4a29-94a2-276efa151726' //Cognito identity pool ID
				// }, function(err, data) {
	    		
	   //  			if ( !err ) {
			 //        	//Store dataset metadata and SyncSessionToken in the user’s session 
			 //        	//for subsequent calls to the API where it is required.		
			 //        	//Retrieve information on the dataset
			 //        	console.log("coming in list record");
			 //        	var dataRecords = JSON.stringify(data.Records);
						
	   //  			}
	   //  			else{
	   //  				JSON.stringify(err);
	   //  			}
				// });    

		        //sync manager to fet and put data on server.
		        var syncClient = new AWS.CognitoSyncManager(); 
		    	console.log(syncClient);
		    	console.log("coming in list record");
		    syncClient.openOrCreateDataset(datasetp, function(err, dataset) 
		    	{ 
		    		if(!err){
			    		dataset.get('lay', function(err, value) {
		  							console.log(JSON.stringify(value));
						});
						dataset.put("myKey", "I am pranav", function(err, record) {
		 							
		 					if ( !err ) {
			 					dataset.synchronize({

			  					onSuccess: function(dataset, newRecords) {
			     					//...
			     					console.log(newRecords);
			     					dataset.getAllRecords(function(err,data){
			     						console.log(JSON.stringify(data));
			     					});
			  					},

			  					onFailure: function(err) {
			     				//...
			     					console.log(err);
			  					},
			  					onConflict: function(dataset, conflicts, callback) {
	                    			// if there are conflicts during the synchronization
	                    			// we can resolve them in this method
			                    	var resolved = [];
			 
			                    for (var i=0; i < conflicts.length; i++) {
			 
			                        // Take remote version.
			                        resolved.push(conflicts[i].resolveWithRemoteRecord());
			 
			                        // Or... take local version.
			                        resolved.push(conflicts[i].resolveWithLocalRecord());
			 
			 
			                    }
			 
			                    dataset.resolve(resolved, function(err) {
			                        if ( !err ) 
			                            callback(true);
			                    });

			                	},
			 
			                	onDatasetDeleted: function(dataset, datasetName, callback) {
			                    	// Return true to delete the local copy of the dataset.
			                    	return callback(true);
			                	},
			 
			                	onDatasetMerged: function(dataset, datasetNames, callback) {
			                    	// Return false to handle dataset merges outside the synchroniziation callback.
			                    	return callback(false);
			 
			                	}


							});
							}
							else{
								console.log(err);	
							}		
						});	
			    	}
			    	else
			    	{
			    		console.log(err);
			    	}	

					});
			},


            getToken: function() {
                // the $http API is based on the deferred/promise APIs exposed by the $q service
                // so it returns a promise for us by default
                return $http.get('http://localhost:3000/api/access/getDeveloperIdentityToken')
                    .then(function(response) {
                        if (typeof response.data === 'object') {
                            return response.data;
                        } else {
                            // invalid response
                            return $q.reject(response.data);
                        }

                    }, function(response) {
                        // something went wrong
                        return $q.reject(response.data);
                    });
            }

	}	        
	
	
}]);	
accessModule.factory('facebookService', ['accessResource','amazonCognitoSyncService',function(accessResource,amazonCognitoSyncService) {
			
	return{
				

		
		 
		 

		FBInit : function(appId){
	        window.fbAsyncInit = function() {
	            FB.init({
	                appId      : appId,
	                xfbml      : true,
	                version    : 'v2.3'
	            });
	        };

	        (function(d, s, id){
	            var js, fjs = d.getElementsByTagName(s)[0];
	            if (d.getElementById(id)) {return;}
	            js = d.createElement(s); js.id = id;
	            js.src = "//connect.facebook.net/en_US/sdk.js";
	            fjs.parentNode.insertBefore(js, fjs);
	        }(document, 'script', 'facebook-jssdk'));

	        console.log("facebook is initialized");
	    },

	    FBsyncAmazonBucket : function(FB_access_token) {       
	        
	        //amazon
	        
	        var params = {
	                AccountId: "558231766839",
	                RoleArn: 'arn:aws:iam::558231766839:role/developer',          
	                IdentityPoolId: "us-east-1:998c9ce3-1154-4a29-94a2-276efa151726",
	                 
	                Logins: {
	                    'graph.facebook.com' : FB_access_token,

	                }
	            };
	            

	            // set the Amazon Cognito region
	            AWS.config.region = 'us-east-1';
	            // initialize the Credentials object with our parameters
	            AWS.config.credentials = new AWS.CognitoIdentityCredentials(params);
	            var cognitoSyncClients = new AWS.CognitoSync();
	              
	            // We can set the get method of the Credentials object to retrieve
	            // the unique identifier for the end user (identityId) once the provider
	            // has refreshed itself
	            
	            
	            var cognitoidentity = new AWS.CognitoIdentity();
	           	var identityid;

	            AWS.config.credentials.get(function(err) {
	                if (!err) {
	                    console.log("Cognito Identity Id: " + AWS.config.credentials.identityId);
	                    // Other service clients will automatically use the Cognito Credentials provider
	                    // configured in the JavaScript SDK.
	                    var cognitoSyncClient = new AWS.CognitoSync();
	                    identityid=AWS.config.credentials.identityId;
	                    amazonCognitoSyncService.synchronize(identityid,"layshah");
	                    cognitoSyncClient.listDatasets({
	                        IdentityId: AWS.config.credentials.identityId,
	                        IdentityPoolId: "us-east-1:998c9ce3-1154-4a29-94a2-276efa151726"
	                    }, 
	                    function(err, data) {
	                        if ( !err ) {
	                            console.log(JSON.stringify(data));
	                            
	                            window.localStorage.clear();
	                        }
	                    });
	                
	                }


	            });


	    }
	            	
			
								
							
									
					
			
	}
} 
]);

accessModule.factory('signupService', ['accessResource',function(accessResource) {
			
	return{
				

		 

		addUser : function(firstName,middelName,lastName,birthDate,gender,city,
	 						state,country,zipCode,email,password,interests) {
			// TODO: Will be replaced by value object creation
	
			var UserInfoParam={
				first_name:firstName,				
				middel_name : middelName,						
				last_name : lastName,
				birth_date :	birthDate,
				gender : gender,
				city : city,
				state : state,
				country :country,
				zipCode :zipCode,
				email : email,
				password : password,
				interests:interests,
				displayName: firstName
			};
			//var UserLoginParam={

			//}
								
							
									
					
			return accessResource.createUserInfo(UserInfoParam);

					// Create partner by REST call
					
		}
		
	
} 
}]);
